// app-plugin.js ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
(function () {
  const L = (...a)=>{ try{ console.log('[plugin]', ...a); }catch{} };
  const W = (...a)=>{ try{ console.warn('[plugin]', ...a); }catch{} };
  const E = (...a)=>{ try{ console.error('[plugin]', ...a); }catch{} };

  let pluginInstalled = false;

  async function checkPluginStatus() {
    try {
      const response = await fetch('/api/plugin-status', { cache: 'no-store' });
      const data = await response.json();
      pluginInstalled = data.installed;
      L('Plugin status:', pluginInstalled);
      return pluginInstalled;
    } catch (error) {
      E('Plugin check error:', error);
      return false;
    }
  }

  async function redirectToPluginInstall() {
    L('Redirecting to plugin install page');
    window.location.href = '/plugin-install.html';
  }

  async function installPrinter(printerData) {
    if (!pluginInstalled) {
      W('Plugin not installed, redirecting...');
      await redirectToPluginInstall();
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    const progressModal = showInstallProgress(printerData);
    
    try {
      L('Installing printer via plugin:', printerData);
      
      const response = await fetch('/api/install', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(printerData)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      L('Install result:', result);

      // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      hideInstallProgress(progressModal);
      
      if (result.success) {
        showNotification('‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', 'success');
      } else {
        showNotification('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
      }
    } catch (error) {
      E('Install error:', error);
      hideInstallProgress(progressModal);
      showNotification('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ' + error.message, 'error');
    }
  }

  function showInstallProgress(printerData) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const modal = document.createElement('div');
    modal.className = 'install-progress-modal';
    modal.innerHTML = `
      <div class="install-progress-content">
        <div class="install-progress-header">
          <h3>üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞</h3>
          <div class="printer-info">
            <strong>${printerData.model}</strong><br>
            <small>IP: ${printerData.ip} | Host: ${printerData.host}</small>
          </div>
        </div>
        
        <div class="install-progress-body">
          <div class="progress-steps">
            <div class="step active" data-step="1">
              <div class="step-icon">üì•</div>
              <div class="step-text">–ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤</div>
            </div>
            <div class="step" data-step="2">
              <div class="step-icon">üîß</div>
              <div class="step-text">–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤</div>
            </div>
            <div class="step" data-step="3">
              <div class="step-icon">üñ®Ô∏è</div>
              <div class="step-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞</div>
            </div>
            <div class="step" data-step="4">
              <div class="step-icon">‚úÖ</div>
              <div class="step-text">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ</div>
            </div>
          </div>
          
          <div class="progress-bar">
            <div class="progress-fill"></div>
          </div>
          
          <div class="progress-text">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ...</div>
        </div>
      </div>
    `;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    Object.assign(modal.style, {
      position: 'fixed',
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      backgroundColor: 'rgba(0, 0, 0, 0.7)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: '10000',
      opacity: '0',
      transition: 'opacity 0.3s ease'
    });
    
    // –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const content = modal.querySelector('.install-progress-content');
    Object.assign(content.style, {
      backgroundColor: 'white',
      borderRadius: '12px',
      padding: '2rem',
      maxWidth: '500px',
      width: '90%',
      boxShadow: '0 20px 40px rgba(0,0,0,0.3)',
      transform: 'scale(0.9)',
      transition: 'transform 0.3s ease'
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏
    const style = document.createElement('style');
    style.textContent = `
      .install-progress-modal .install-progress-header {
        text-align: center;
        margin-bottom: 2rem;
      }
      
      .install-progress-modal .install-progress-header h3 {
        margin: 0 0 1rem 0;
        color: #1f2937;
        font-size: 1.5rem;
      }
      
      .install-progress-modal .printer-info {
        background: #f3f4f6;
        padding: 1rem;
        border-radius: 8px;
        color: #6b7280;
      }
      
      .install-progress-modal .progress-steps {
        display: flex;
        justify-content: space-between;
        margin-bottom: 2rem;
        position: relative;
      }
      
      .install-progress-modal .progress-steps::before {
        content: '';
        position: absolute;
        top: 20px;
        left: 20px;
        right: 20px;
        height: 2px;
        background: #e5e7eb;
        z-index: 1;
      }
      
      .install-progress-modal .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        z-index: 2;
        opacity: 0.5;
        transition: all 0.3s ease;
      }
      
      .install-progress-modal .step.active {
        opacity: 1;
      }
      
      .install-progress-modal .step.completed {
        opacity: 1;
      }
      
      .install-progress-modal .step-icon {
        width: 40px;
        height: 40px;
        background: #e5e7eb;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
        transition: all 0.3s ease;
      }
      
      .install-progress-modal .step.active .step-icon {
        background: #3b82f6;
        color: white;
        animation: pulse 2s infinite;
      }
      
      .install-progress-modal .step.completed .step-icon {
        background: #10b981;
        color: white;
      }
      
      .install-progress-modal .step-text {
        font-size: 0.875rem;
        color: #6b7280;
        text-align: center;
        max-width: 80px;
      }
      
      .install-progress-modal .progress-bar {
        width: 100%;
        height: 8px;
        background: #e5e7eb;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 1rem;
      }
      
      .install-progress-modal .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #3b82f6, #10b981);
        width: 0%;
        transition: width 0.5s ease;
        border-radius: 4px;
      }
      
      .install-progress-modal .progress-text {
        text-align: center;
        color: #6b7280;
        font-size: 0.875rem;
      }
      
      @keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.1); }
      }
    `;
    
    document.head.appendChild(style);
    document.body.appendChild(modal);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      modal.style.opacity = '1';
      content.style.transform = 'scale(1)';
    }, 100);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    simulateProgress(modal, printerData);
    
    return modal;
  }
  
  function simulateProgress(modal, printerData) {
    const steps = modal.querySelectorAll('.step');
    const progressFill = modal.querySelector('.progress-fill');
    const progressText = modal.querySelector('.progress-text');
    
    const stepTexts = [
      '–ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...',
      '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –ø—Ä–∏–Ω—Ç–µ—Ä–∞...',
      '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞ –∏ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—á–∞—Ç–∏...',
      '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...'
    ];
    
    let currentStep = 0;
    
    function nextStep() {
      if (currentStep < steps.length) {
        // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        if (currentStep > 0) {
          steps[currentStep - 1].classList.remove('active');
          steps[currentStep - 1].classList.add('completed');
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        if (currentStep < steps.length) {
          steps[currentStep].classList.add('active');
          progressText.textContent = stepTexts[currentStep];
          progressFill.style.width = `${((currentStep + 1) / steps.length) * 100}%`;
        }
        
        currentStep++;
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (2-4 —Å–µ–∫—É–Ω–¥—ã)
        if (currentStep < steps.length) {
          setTimeout(nextStep, 2000 + Math.random() * 2000);
        }
      }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
    setTimeout(nextStep, 500);
  }
  
  function hideInstallProgress(modal) {
    if (!modal) return;
    
    const content = modal.querySelector('.install-progress-content');
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    modal.style.opacity = '0';
    content.style.transform = 'scale(0.9)';
    
    setTimeout(() => {
      if (modal.parentNode) {
        modal.parentNode.removeChild(modal);
      }
    }, 300);
  }

  function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    Object.assign(notification.style, {
      position: 'fixed',
      top: '20px',
      right: '20px',
      padding: '1rem 1.5rem',
      borderRadius: '8px',
      color: 'white',
      fontWeight: '500',
      zIndex: '10000',
      maxWidth: '400px',
      boxShadow: '0 4px 20px rgba(0,0,0,0.15)',
      transform: 'translateX(100%)',
      transition: 'transform 0.3s ease'
    });

    // –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    const colors = {
      success: '#10b981',
      error: '#ef4444',
      info: '#3b82f6'
    };
    notification.style.backgroundColor = colors[type] || colors.info;

    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      notification.style.transform = 'translateX(0)';
    }, 100);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      notification.style.transform = 'translateX(100%)';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 5000);
  }

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  function interceptInstallClicks() {
    document.addEventListener('click', async (e) => {
      const btn = e.target.closest('a.btn.install, .btn.install, [data-action="install"], .btn-install');
      if (!btn) return;

      e.preventDefault();
      e.stopPropagation();

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
      const row = btn.closest('.row');
      if (!row) {
        showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞', 'error');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
      const cbPrn = row.querySelector('input.cb-prn');
      const cbScn = row.querySelector('input.cb-scn');
      
      if (!cbPrn && !cbScn) {
        showNotification('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ–∫–±–æ–∫—Å—ã –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', 'error');
        return;
      }

      const printerChecked = cbPrn ? cbPrn.checked : false;
      const scannerChecked = cbScn ? cbScn.checked : false;

      if (!printerChecked && !scannerChecked) {
        showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: –ø—Ä–∏–Ω—Ç–µ—Ä –∏/–∏–ª–∏ —Å–∫–∞–Ω–µ—Ä', 'error');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      const ip = btn.dataset.ip || '';
      const host = btn.dataset.host || '';
      const model = btn.dataset.model || '';
      const desc = btn.dataset.desc || '';

      if (!ip || !model) {
        showNotification('‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞', 'error');
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
      let variant = null;
      if (printerChecked && scannerChecked) variant = 'all';
      else if (printerChecked) variant = 'printer';
      else if (scannerChecked) variant = 'scanner';

      const printerData = {
        ip: ip,
        host: host,
        model: model,
        desc: desc,
        variant: variant,
        printer: printerChecked,
        scanner: scannerChecked
      };

      showNotification('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...', 'info');
      await installPrinter(printerData);
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  async function init() {
    L('Initializing plugin system');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–≥–∏–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const installed = await checkPluginStatus();
    
    if (!installed) {
      L('Plugin not installed, redirecting to install page');
      await redirectToPluginInstall();
      return;
    }

    // –ï—Å–ª–∏ –ø–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏
    interceptInstallClicks();
    L('Plugin system initialized');
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
  window.PluginSystem = {
    checkStatus: checkPluginStatus,
    installPrinter: installPrinter,
    showNotification: showNotification
  };

})();
